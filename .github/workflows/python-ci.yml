name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests
        run: |
          python -m pytest tests/ -v

      - name: Run determinism tests
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          from src.simulator.config import MonteCarloConfig
          from src.simulator.monte_carlo import MonteCarloSimulator, sample_simulation_trial
          import numpy as np
          
          print('Testing determinism across different n_jobs values...')
          
          # Test n_jobs=1 vs n_jobs=4 determinism
          config1 = MonteCarloConfig(n_trials=50, n_jobs=1, base_seed=42)
          config4 = MonteCarloConfig(n_trials=50, n_jobs=4, base_seed=42)
          
          sim1 = MonteCarloSimulator(config1)
          sim4 = MonteCarloSimulator(config4)
          
          results1 = sim1.run_simulation(sample_simulation_trial, mean=1.0, std=2.0)
          results4 = sim4.run_simulation(sample_simulation_trial, mean=1.0, std=2.0)
          
          np.testing.assert_array_equal(results1, results4)
          print('✓ n_jobs=1 vs n_jobs=4 determinism test passed')
          
          # Test repeated runs determinism
          results4_repeat = sim4.run_simulation(sample_simulation_trial, mean=1.0, std=2.0)
          np.testing.assert_array_equal(results4, results4_repeat)
          print('✓ Repeated runs determinism test passed')
          
          print('All determinism tests passed!')
          "

      - name: Quickstart smoke test
        run: |
          python -c "
          import sys, platform
          print('Python', sys.version)
          print('Platform', platform.platform())
          
          # Import and test basic functionality
          sys.path.insert(0, '.')
          from src.simulator.config import MonteCarloConfig
          from src.simulator.monte_carlo import MonteCarloSimulator, sample_simulation_trial
          
          # Quick smoke test
          config = MonteCarloConfig(n_trials=10, n_jobs=1, base_seed=42)
          simulator = MonteCarloSimulator(config)
          results = simulator.run_simulation(sample_simulation_trial)
          
          assert len(results) == 10
          print('✓ Basic Monte Carlo simulation smoke test passed')
          "
