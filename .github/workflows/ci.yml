name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for coverage comparison

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,cli]

    - name: Lint with flake8
      run: |
        flake8 src/nfl_gpp_simlab tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/nfl_gpp_simlab tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check src/nfl_gpp_simlab tests

    - name: Type check with mypy
      run: |
        mypy src/nfl_gpp_simlab

    - name: Test with pytest
      run: |
        pytest --cov=nfl_gpp_simlab --cov-report=xml --cov-report=term-missing

    - name: Coverage comparison
      if: github.event_name == 'pull_request'
      run: |
        # Get coverage for current branch
        CURRENT_COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        print(f\"{float(root.attrib['line-rate']) * 100:.2f}\")
        ")
        
        # Get coverage for base branch
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
        pip install -e .[dev,cli]
        pytest --cov=nfl_gpp_simlab --cov-report=xml --quiet || true
        
        BASE_COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            print(f\"{float(root.attrib['line-rate']) * 100:.2f}\")
        except:
            print('0.00')
        " 2>/dev/null || echo "0.00")
        
        echo "Current coverage: ${CURRENT_COVERAGE}%"
        echo "Base coverage: ${BASE_COVERAGE}%"
        
        # Check if coverage decreased
        if (( $(echo "${CURRENT_COVERAGE} < ${BASE_COVERAGE}" | bc -l) )); then
          echo "❌ Coverage decreased from ${BASE_COVERAGE}% to ${CURRENT_COVERAGE}%"
          exit 1
        else
          echo "✅ Coverage maintained or improved: ${BASE_COVERAGE}% → ${CURRENT_COVERAGE}%"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .[cli]

    - name: Test CLI installation
      run: |
        nfl-gpp-sim --version

    - name: Test config generation
      run: |
        nfl-gpp-sim --generate-config test_config.toml
        test -f test_config.toml

    - name: Test simulation with sample data
      run: |
        # Create sample data
        cat > sample_players.csv << EOF
        PLAYER,POS,TEAM,FPTS,SAL
        Josh Allen,QB,BUF,25.5,8500
        Saquon Barkley,RB,NYG,18.2,7000
        Stefon Diggs,WR,BUF,16.8,6500
        EOF
        
        # Run simulation
        nfl-gpp-sim --input sample_players.csv --output test_output --n-trials 100 --seed 42
        
        # Verify outputs
        test -f test_output/sim_players.csv
        test -f test_output/metadata.json
        
        # Check that we have expected number of players
        PLAYER_COUNT=$(tail -n +2 test_output/sim_players.csv | wc -l)
        if [ "$PLAYER_COUNT" -ne 3 ]; then
          echo "Expected 3 players, got $PLAYER_COUNT"
          exit 1
        fi